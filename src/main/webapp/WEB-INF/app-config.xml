<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.4.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- scan for all classes within the package, but IGNORE all annotated with 
		@Controller (they are configured in dispatcher context) -->
	<context:component-scan base-package="ie.cit.cloud">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean 
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!--  Need to put alter to connect to CloudFoundry here. -->
	<!-- <cloud:data-source id="dataSource" /> -->



    <!-- *********************************** 
		 mySQL CONNECTION SETUP 
	***********************************  --> 

	<!-- Initialise the mySQL db -->
	<jdbc:initialize-database data-source="dataSource"
		ignore-failures="NONE">
		<jdbc:script location="classpath:db-schema.sql" />
	</jdbc:initialize-database>
 
 	<bean 
 		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" >
				<value>classpath:database.properties</value>  
		</property>
	</bean>
	
    <bean id="dataSource" 
         class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
	</bean>

 <!-- *********************************** 
		END  mySQL CONNECTION SETUP 
	***********************************  --> 



    <!-- *********************************** 
		 HIBERNATE / TRANSACTION MANAGER SETUP
	***********************************  --> 
	
	<!-- Enable AspectJ and annotation driven for transaction manager-->
	<aop:aspectj-autoproxy />
	<tx:annotation-driven proxy-target-class="true"/>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	
    <!-- *********************************** 
		 ORM LAYER THROUHG HIBERNATE
	***********************************  --> 
	<!-- Create Hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
			<property name="hibernateProperties">
		       <props>
		         <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
		         <prop key="hibernate.show_sql">true</prop>
		       </props>
	    </property>
    
		<property name="annotatedClasses">
			<list>
				<value>ie.cit.cloud.appdev.model.Book</value>
				<!-- <value>ie.cit.cloud.appdev.model.User</value>  -->
			</list>
		</property>
	</bean>
	 <!-- *********************************** 
		END ORM AND TRANSACTION MANAGER SETUP
	***********************************  --> 
	
	
	
	<!-- *********************************** 
		SECURITY/AUTHENTICATION SECTION
	***********************************  --> 
	
	
	<!-- Use the security handler to ensure authentication   -->
	<security:http auto-config="true">
	 <security:intercept-url pattern="/create*" access="ROLE_ADMIN" />  
	 <security:intercept-url pattern="/edit*" access="ROLE_ADMIN" />  
	 <security:intercept-url pattern="/delete*" access="ROLE_ADMIN" />  
	 <security:intercept-url pattern="/admin*" access="ROLE_ADMIN" />  
		<security:form-login login-page="/login" 
							default-target-url="/index"
							authentication-failure-url="/loginfailed"/>
		<security:logout logout-success-url="/index" />
	</security:http>
	<!-- Use mySQL to host the uid and passwords etc. through the authentication manager manager -->
	<security:authentication-manager>
		<security:authentication-provider>
			<!--   <security:password-encoder hash="md5" /> -->
		<security:jdbc-user-service data-source-ref="dataSource"
		 users-by-username-query="
		      select username,password, enabled 
		      from users where username=?" 
 		   authorities-by-username-query="
		      select u.username, ur.authority from users u, user_roles ur 
		      where u.user_id = ur.user_id and u.username =?  " 	/>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<!-- *********************************** 
		END SECURITY/AUTHENTICATION SECTION
	***********************************  --> 
</beans>

